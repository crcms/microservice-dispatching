<?php

/**
 * @author simon <crcms@crcms.cn>
 * @datetime 2019-01-25 22:11
 *
 * @link http://crcms.cn/
 *
 * @copyright Copyright &copy; 2019 Rights Reserved CRCMS
 */

namespace CrCms\Microservice\Dispatching\Tests;

use CrCms\Microservice\Dispatching\Dispatcher;
use CrCms\Microservice\Dispatching\ReflectionControllerMethod;
use CrCms\Microservice\Dispatching\Tests\Controllers\TestingController;
use Illuminate\Container\Container;
use PHPUnit\Framework\TestCase;

class DispatcherTest extends TestCase
{
    use ApplicationTrait;

    /**
     * @var Dispatcher
     */
    protected $dispatcher;

    public function setUp()
    {
        // TODO: Change the autogenerated stub
        parent::setUp();
        $this->dispatcher = new Dispatcher(static::$app);
    }

    public function testMiddleware()
    {
        $this->dispatcher->middleware('m1')->register('a1', ['uses' => 'UserController@showProfile']);
        $this->dispatcher->middleware('m2')->register('a2', ['uses' => 'A2@method', 'middleware' => ['m22']]);

        $this->dispatcher->middleware('m3')->group(['middleware' => ['m33']], function () {
            $this->dispatcher->middleware('m333')->register('a3', 'A3@a3');

            $this->dispatcher->middleware('m333', 'm334')->group(['middleware' => 'm3344'], function () {
                $this->dispatcher->middleware('m33445|m334455')->register('a4', 'A4@a4');
            });
        });

        $this->dispatcher->middleware('m5')->register('a5', ['uses' => 'A2@method']);

        $callers = $this->dispatcher->getCallers();

        //a1
        $this->assertEquals(['m1'], $callers['a1']->getCallerMiddleware());
        //a2
        $this->assertEquals(['m2', 'm22'], $callers['a2']->getCallerMiddleware());
        // a3
        $this->assertEquals(['m3', 'm33', 'm333'], $callers['a3']->getCallerMiddleware());
        // a4
        $this->assertEquals(['m3', 'm33', 'm333', 'm334', 'm3344', 'm33445', 'm334455'], $callers['a4']->getCallerMiddleware());
        //a1
        $this->assertEquals(['m5'], $callers['a5']->getCallerMiddleware());
    }


    public function testNamespace()
    {
        $this->dispatcher->namespace('A')->group(['namespace' => 'A1'], function () {
            $this->dispatcher->register('a1', 'A1@a1');
            $this->dispatcher->namespace('B')->group(['namespace' => 'B1'], function () {
                $this->dispatcher->register('a2', 'A4@a4');
                $this->dispatcher->namespace('C')->group(['namespace' => 'C1'], function () {
                    $this->dispatcher->register('a3', 'A5@a4');
                });
            });
        });

        $callers = $this->dispatcher->getCallers();

        $this->assertEquals('A\A1\A1@a1', $callers['a1']->getCallerUses());
        $this->assertEquals('A\A1\B\B1\A4@a4', $callers['a2']->getCallerUses());
        $this->assertEquals('A\A1\B\B1\C\C1\A5@a4', $callers['a3']->getCallerUses());
    }


    public function testRegister()
    {
        $this->dispatcher->register('abc', 'A1@a1');

        $this->dispatcher->register('testing', TestingController::class);

        $callers = $this->dispatcher->getCallers();

        $this->assertEquals('A1@a1', $callers['abc']->getCallerUses());

        $methods = ReflectionControllerMethod::getMethods(TestingController::class);
        foreach ($methods as $method) {
            $this->assertEquals(TestingController::class.'@'.$method, $callers['testing.'.$method]->getCallerUses());
        }
    }
}
